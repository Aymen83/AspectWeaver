using System;
using System.Collections.Generic;
using System.Reflection; // Required for MethodInfo

namespace AspectWeaver.Abstractions
{
    /// <summary>
    /// Provides context information about the intercepted method invocation.
    /// This context is passed through the chain of aspect handlers.
    /// </summary>
    public sealed class InvocationContext
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvocationContext"/> class.
        /// </summary>
        /// <remarks>
        /// This constructor is intended to be called by the code generated by AspectWeaver.
        /// </remarks>
        public InvocationContext(
            object? targetInstance,
            IServiceProvider serviceProvider,
            // PBI 4.2: Add MethodInfo parameter (reordered for logical grouping)
            MethodInfo methodInfo,
            string methodName,
            string targetTypeName,
            IReadOnlyDictionary<string, object?> arguments)
        {
            // Enforce invariants.
            ServiceProvider = serviceProvider ?? throw new ArgumentNullException(nameof(serviceProvider));
            // PBI 4.2: Initialize and validate MethodInfo.
            MethodInfo = methodInfo ?? throw new ArgumentNullException(nameof(methodInfo));
            MethodName = methodName ?? throw new ArgumentNullException(nameof(methodName));
            TargetTypeName = targetTypeName ?? throw new ArgumentNullException(nameof(targetTypeName));
            Arguments = arguments ?? throw new ArgumentNullException(nameof(arguments));
            TargetInstance = targetInstance;
        }

        #region Core Properties and Environment

        /// <summary>
        /// Gets the instance of the object on which the method is being invoked.
        /// Returns null if the intercepted method is static.
        /// </summary>
        public object? TargetInstance { get; }

        /// <summary>
        /// Gets the <see cref="IServiceProvider"/> associated with the current execution scope.
        /// </summary>
        public IServiceProvider ServiceProvider { get; }

        /// <summary>
        /// Gets the name of the intercepted method.
        /// </summary>
        public string MethodName { get; }

        /// <summary>
        /// Gets the full name of the type containing the intercepted method.
        /// </summary>
        public string TargetTypeName { get; }

        /// <summary>
        /// Gets a read-only dictionary containing the arguments passed to the intercepted method.
        /// </summary>
        public IReadOnlyDictionary<string, object?> Arguments { get; }

        #endregion

        #region PBI 4.2 - Reflection Metadata
        /// <summary>
        /// Gets the <see cref="System.Reflection.MethodInfo"/> representing the intercepted method.
        /// This allows access to method attributes, parameters metadata, and generic type arguments.
        /// </summary>
        public MethodInfo MethodInfo { get; }
        #endregion
    }
}