namespace AspectWeaver.Generator
{
    internal static class SourceTemplates
    {
        // (InterceptsLocationAttributeSource remains the same, ensure it's complete)
        public const string InterceptsLocationAttributeSource = """
// <auto-generated>
// This file is generated by AspectWeaver.
// It defines the necessary attributes for C# 12 Interceptors.
// </auto-generated>

#nullable enable

namespace System.Runtime.CompilerServices
{
    using System;

    /// <summary>
    /// Allows a C# compiler to redirect an invocation to a different method (Interceptor).
    /// Note: This attribute must be defined internally as it is recognized intrinsically by the compiler.
    /// </summary>
    [AttributeUsage(AttributeTargets.Method, AllowMultiple = true, Inherited = false)]
    internal sealed class InterceptsLocationAttribute : Attribute
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InterceptsLocationAttribute"/> class.
        /// </summary>
        public InterceptsLocationAttribute(string filePath, int line, int character)
        {
            // The compiler utilizes these parameters intrinsically; the body can be empty.
        }
    }
}
""";

        // New Template:
        public const string PlaceholderServiceProviderSource = """
// <auto-generated>
// Placeholder for IServiceProvider used until DI integration is configured (Epic 3).
// </auto-generated>

#nullable enable

namespace AspectWeaver.Generated
{
    using System;

    internal sealed class PlaceholderServiceProvider : IServiceProvider
    {
        // For the MVP PBI 2.5, we return null. The generated pipeline code checks for null and throws.
        // This correctly simulates a missing DI registration without complex placeholder logic.
        public object? GetService(Type serviceType)
        {
            return null;
        }
    }
}
""";

    }
}