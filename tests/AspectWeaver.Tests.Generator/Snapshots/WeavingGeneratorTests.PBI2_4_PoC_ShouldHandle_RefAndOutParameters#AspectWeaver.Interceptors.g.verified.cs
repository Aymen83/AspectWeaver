//HintName: AspectWeaver.Interceptors.g.cs
// <auto-generated>
// This file was generated by AspectWeaver. DO NOT EDIT.
// </auto-generated>

#nullable enable

using System.Runtime.CompilerServices;

namespace AspectWeaver.Generated
{
    internal static class Interceptors
    {
        [InterceptsLocation("[ScrubbedPath]", 32, 21)]
        internal static bool InterceptMethod0(this global::TestApp.ComplexService __instance, string input, out int value, ref bool initialized)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            // PBI 4.2: Resolve MethodInfo (Using Type.GetMethod for robustness).
            var __targetType = typeof(global::TestApp.ComplexService);
            var __paramTypes = new global::System.Type[]
            {
                typeof(string),
                typeof(int).MakeByRefType(),
                typeof(bool).MakeByRefType(),
            };
            var __methodInfo = __targetType.GetMethod("TryParse", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, __paramTypes, null);
            if (__methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for TryParse. This indicates an issue in AspectWeaver.");
            var __arguments = new global::System.Collections.Generic.Dictionary<string, object?>()
            {
                { "input", input },
                { "value", value },
                { "initialized", initialized },
            };
            var __context = new global::AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: __methodInfo,
                methodName: "TryParse",
                targetTypeName: "global::TestApp.ComplexService",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<bool>> __pipeline = (ctx) =>
            {
                var result = __instance.TryParse(input, out value, ref initialized);
                return new global::System.Threading.Tasks.ValueTask<bool>(result);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 0: global::RefOutAspectAttribute (Order=0)
            var __next0 = __pipeline;
            var __handler0 = (global::AspectWeaver.Abstractions.IAspectHandler<global::RefOutAspectAttribute>?)__serviceProvider.GetService(typeof(global::AspectWeaver.Abstractions.IAspectHandler<global::RefOutAspectAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::RefOutAspectAttribute");
            var __attribute0 = new global::RefOutAspectAttribute();
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<bool>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
            return __finalResult;
        }
    }
}
