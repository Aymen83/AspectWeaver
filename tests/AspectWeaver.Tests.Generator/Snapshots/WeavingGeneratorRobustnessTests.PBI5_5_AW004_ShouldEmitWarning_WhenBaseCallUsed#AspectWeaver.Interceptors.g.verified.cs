//HintName: AspectWeaver.Interceptors.g.cs
// <auto-generated>
// This file was generated by AspectWeaver. DO NOT EDIT.
// </auto-generated>

#nullable enable

// Suppress warnings for generated code.
#pragma warning disable CS1591
#pragma warning disable RS0016

using System.Runtime.CompilerServices;
using System.Diagnostics;

namespace AspectWeaver.Generated
{
    [global::System.Diagnostics.DebuggerStepThrough]
    [global::System.Diagnostics.DebuggerNonUserCode]
    internal static class Interceptors
    {
        [InterceptsLocation("[ScrubbedPath]", 43, 18)]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void InterceptMethod0(this global::TestApp.DerivedService __instance)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            // PBI 4.2: Resolve MethodInfo (Using Type.GetMethod for robustness).
            var __targetType = typeof(global::TestApp.DerivedService);
            var __paramTypes = new global::System.Type[]
            {
            };
            var __methodInfo = __targetType.GetMethod("Helper", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, __paramTypes, null);
            if (__methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for Helper. This indicates an issue in AspectWeaver.");
            var __arguments = new global::System.Collections.Generic.Dictionary<string, object?>()
            {
            };
            var __context = new global::AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: __methodInfo,
                methodName: "Helper",
                targetTypeName: "global::TestApp.DerivedService",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<global::AspectWeaver.Abstractions.VoidResult>> __pipeline = (ctx) =>
            {
                __instance.Helper();
                return new global::System.Threading.Tasks.ValueTask<global::AspectWeaver.Abstractions.VoidResult>(global::AspectWeaver.Abstractions.VoidResult.Instance);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 0: global::AspectBAttribute (Order=20)
            var __next0 = __pipeline;
            var __handler0 = (global::AspectWeaver.Abstractions.IAspectHandler<global::AspectBAttribute>?)__serviceProvider.GetService(typeof(global::AspectWeaver.Abstractions.IAspectHandler<global::AspectBAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectBAttribute");
            var __attribute0 = new global::AspectBAttribute();
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<global::AspectWeaver.Abstractions.VoidResult>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
        }
        
        [InterceptsLocation("[ScrubbedPath]", 59, 21)]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void InterceptMethod1(this global::TestApp.DerivedService __instance)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            // PBI 4.2: Resolve MethodInfo (Using Type.GetMethod for robustness).
            var __targetType = typeof(global::TestApp.DerivedService);
            var __paramTypes = new global::System.Type[]
            {
            };
            var __methodInfo = __targetType.GetMethod("Execute", global::System.Reflection.BindingFlags.Public | global::System.Reflection.BindingFlags.NonPublic | global::System.Reflection.BindingFlags.Instance, null, __paramTypes, null);
            if (__methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for Execute. This indicates an issue in AspectWeaver.");
            var __arguments = new global::System.Collections.Generic.Dictionary<string, object?>()
            {
            };
            var __context = new global::AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: __methodInfo,
                methodName: "Execute",
                targetTypeName: "global::TestApp.DerivedService",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<global::AspectWeaver.Abstractions.VoidResult>> __pipeline = (ctx) =>
            {
                __instance.Execute();
                return new global::System.Threading.Tasks.ValueTask<global::AspectWeaver.Abstractions.VoidResult>(global::AspectWeaver.Abstractions.VoidResult.Instance);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 0: global::AspectAAttribute (Order=10)
            var __next0 = __pipeline;
            var __handler0 = (global::AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>?)__serviceProvider.GetService(typeof(global::AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectAAttribute");
            var __attribute0 = new global::AspectAAttribute();
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<global::AspectWeaver.Abstractions.VoidResult>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
        }
    }
}
