//HintName: AspectWeaver.Interceptors.g.cs
// <auto-generated>
// This file was generated by Aymen83.AspectWeaver. DO NOT EDIT.
// </auto-generated>

#nullable enable

#pragma warning disable CS1591
#pragma warning disable RS0016

using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Reflection;

namespace Aymen83.AspectWeaver.Generated
{
    [global::System.Diagnostics.DebuggerStepThrough]
    [global::System.Diagnostics.DebuggerNonUserCode]
    internal static class Interceptors
    {
        [global::System.Runtime.CompilerServices.InterceptsLocation(version: 1, data: "[ScrubbedData]")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void InterceptMethod0(this global::TestApp.ConcreteWorker __instance)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            var __arguments = new Interceptor0_Cache.ArgumentsStruct();
            var __context = new global::Aymen83.AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: Interceptor0_Cache.MethodInfo,
                methodName: "Work",
                targetTypeName: "global::TestApp.ConcreteWorker",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::Aymen83.AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>> __pipeline = (ctx) =>
            {
                __instance.Work();
                return new global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(global::Aymen83.AspectWeaver.Abstractions.VoidResult.Instance);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 3: global::AspectBAttribute (Order=20)
            var __next3 = __pipeline;
            var __handler3 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectBAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectBAttribute>));
            if (__handler3 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectBAttribute");
            var __attribute3 = Interceptor0_Cache.Attribute_3;
            __pipeline = (ctx) =>
            {
                return __handler3.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute3, ctx, __next3);
            };
            
            // Aspect 2: global::AspectAAttribute (Order=10)
            var __next2 = __pipeline;
            var __handler2 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>));
            if (__handler2 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectAAttribute");
            var __attribute2 = Interceptor0_Cache.Attribute_2;
            __pipeline = (ctx) =>
            {
                return __handler2.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute2, ctx, __next2);
            };
            
            // Aspect 1: global::AspectCAttribute (Order=5)
            var __next1 = __pipeline;
            var __handler1 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectCAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectCAttribute>));
            if (__handler1 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectCAttribute");
            var __attribute1 = Interceptor0_Cache.Attribute_1;
            __pipeline = (ctx) =>
            {
                return __handler1.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute1, ctx, __next1);
            };
            
            // Aspect 0: global::UniqueAspectAttribute (Order=1)
            var __next0 = __pipeline;
            var __handler0 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::UniqueAspectAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::UniqueAspectAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::UniqueAspectAttribute");
            var __attribute0 = Interceptor0_Cache.Attribute_0;
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
        }
        
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Diagnostics.DebuggerNonUserCode]
        private static class Interceptor0_Cache
        {
            public readonly struct ArgumentsStruct : global::Aymen83.AspectWeaver.Abstractions.IArgumentsContainer
            {
                
                public ArgumentsStruct()
                {
                }
                
                public int Count => 0;
                
                public object? this[string parameterName] => parameterName switch
                {
                    _ => throw new global::System.ArgumentOutOfRangeException(nameof(parameterName), $"Parameter '{parameterName}' not found.")
                };
                
                public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator()
                {
                    yield break;
                }
                
                global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
            }
            
            internal static readonly MethodInfo MethodInfo = InitMethodInfo();
            
            internal static readonly global::AspectBAttribute Attribute_3 = InitAttribute_3();
            
            private static global::AspectBAttribute InitAttribute_3()
            {
                return new global::AspectBAttribute();
            }
            
            internal static readonly global::AspectAAttribute Attribute_2 = InitAttribute_2();
            
            private static global::AspectAAttribute InitAttribute_2()
            {
                return new global::AspectAAttribute();
            }
            
            internal static readonly global::AspectCAttribute Attribute_1 = InitAttribute_1();
            
            private static global::AspectCAttribute InitAttribute_1()
            {
                return new global::AspectCAttribute();
            }
            
            internal static readonly global::UniqueAspectAttribute Attribute_0 = InitAttribute_0();
            
            private static global::UniqueAspectAttribute InitAttribute_0()
            {
                return new global::UniqueAspectAttribute();
            }
            
            private static MethodInfo InitMethodInfo()
            {
                var __targetType = typeof(global::TestApp.ConcreteWorker);
                var __paramTypes = new global::System.Type[]
                {
                };
                var methodInfo = __targetType.GetMethod("Work", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, __paramTypes, null);
                if (methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for Work during initialization.");
                return methodInfo;
            }
            
        }
        
        [global::System.Runtime.CompilerServices.InterceptsLocation(version: 1, data: "[ScrubbedData]")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void InterceptMethod1(this global::TestApp.IWorker __instance)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            var __arguments = new Interceptor1_Cache.ArgumentsStruct();
            var __context = new global::Aymen83.AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: Interceptor1_Cache.MethodInfo,
                methodName: "Work",
                targetTypeName: "global::TestApp.IWorker",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::Aymen83.AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>> __pipeline = (ctx) =>
            {
                __instance.Work();
                return new global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(global::Aymen83.AspectWeaver.Abstractions.VoidResult.Instance);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 1: global::AspectAAttribute (Order=10)
            var __next1 = __pipeline;
            var __handler1 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::AspectAAttribute>));
            if (__handler1 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::AspectAAttribute");
            var __attribute1 = Interceptor1_Cache.Attribute_1;
            __pipeline = (ctx) =>
            {
                return __handler1.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute1, ctx, __next1);
            };
            
            // Aspect 0: global::UniqueAspectAttribute (Order=1)
            var __next0 = __pipeline;
            var __handler0 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::UniqueAspectAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::UniqueAspectAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::UniqueAspectAttribute");
            var __attribute0 = Interceptor1_Cache.Attribute_0;
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
        }
        
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Diagnostics.DebuggerNonUserCode]
        private static class Interceptor1_Cache
        {
            public readonly struct ArgumentsStruct : global::Aymen83.AspectWeaver.Abstractions.IArgumentsContainer
            {
                
                public ArgumentsStruct()
                {
                }
                
                public int Count => 0;
                
                public object? this[string parameterName] => parameterName switch
                {
                    _ => throw new global::System.ArgumentOutOfRangeException(nameof(parameterName), $"Parameter '{parameterName}' not found.")
                };
                
                public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator()
                {
                    yield break;
                }
                
                global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
            }
            
            internal static readonly MethodInfo MethodInfo = InitMethodInfo();
            
            internal static readonly global::AspectAAttribute Attribute_1 = InitAttribute_1();
            
            private static global::AspectAAttribute InitAttribute_1()
            {
                return new global::AspectAAttribute();
            }
            
            internal static readonly global::UniqueAspectAttribute Attribute_0 = InitAttribute_0();
            
            private static global::UniqueAspectAttribute InitAttribute_0()
            {
                return new global::UniqueAspectAttribute();
            }
            
            private static MethodInfo InitMethodInfo()
            {
                var __targetType = typeof(global::TestApp.IWorker);
                var __paramTypes = new global::System.Type[]
                {
                };
                var methodInfo = __targetType.GetMethod("Work", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, __paramTypes, null);
                if (methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for Work during initialization.");
                return methodInfo;
            }
            
        }
    }
}
