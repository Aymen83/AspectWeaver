//HintName: AspectWeaver.Interceptors.g.cs
// <auto-generated>
// This file was generated by Aymen83.AspectWeaver. DO NOT EDIT.
// </auto-generated>

#nullable enable

#pragma warning disable CS1591
#pragma warning disable RS0016

using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Reflection;

namespace Aymen83.AspectWeaver.Generated
{
    [global::System.Diagnostics.DebuggerStepThrough]
    [global::System.Diagnostics.DebuggerNonUserCode]
    internal static class Interceptors
    {
        [global::System.Runtime.CompilerServices.InterceptsLocation(version: 1, data: "[ScrubbedData]")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static int InterceptMethod0<TInput, TResult>(this global::TestApp.UtilityService __instance, string input)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance.ServiceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance.ServiceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            var __arguments = new Interceptor0_Cache.ArgumentsStruct(input);
            var __context = new global::Aymen83.AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: Interceptor0_Cache.MethodInfo,
                methodName: "Convert",
                targetTypeName: "global::TestApp.UtilityService",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::Aymen83.AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<int>> __pipeline = (ctx) =>
            {
                var result = __instance.Convert<TInput, TResult>(input);
                return new global::System.Threading.Tasks.ValueTask<int>(result);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 0: global::GenericAspectAttribute (Order=0)
            var __next0 = __pipeline;
            var __handler0 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::GenericAspectAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::GenericAspectAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::GenericAspectAttribute");
            var __attribute0 = Interceptor0_Cache.Attribute_0;
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<int>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
            return __finalResult;
        }
        
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Diagnostics.DebuggerNonUserCode]
        private static class Interceptor0_Cache
        {
            public readonly struct ArgumentsStruct : global::Aymen83.AspectWeaver.Abstractions.IArgumentsContainer
            {
                private readonly global::System.String _input;
                
                public ArgumentsStruct(global::System.String input)
                {
                    _input = input;
                }
                
                public int Count => 1;
                
                public object? this[string parameterName] => parameterName switch
                {
                    "input" => _input,
                    _ => throw new global::System.ArgumentOutOfRangeException(nameof(parameterName), $"Parameter '{parameterName}' not found.")
                };
                
                public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<string, object?>> GetEnumerator()
                {
                    yield return new global::System.Collections.Generic.KeyValuePair<string, object?>("input", _input);
                }
                
                global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator() => GetEnumerator();
            }
            
            internal static readonly MethodInfo MethodInfo = InitMethodInfo();
            
            internal static readonly global::GenericAspectAttribute Attribute_0 = InitAttribute_0();
            
            private static global::GenericAspectAttribute InitAttribute_0()
            {
                return new global::GenericAspectAttribute();
            }
            
            private static MethodInfo InitMethodInfo()
            {
                var __targetType = typeof(global::TestApp.UtilityService);
                var __paramTypes = new global::System.Type[]
                {
                    typeof(string),
                };
                var __genericMethodDefinition = __targetType.GetMethod("Convert", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, __paramTypes, null);
                if (__genericMethodDefinition == null) throw new global::System.InvalidOperationException("Could not resolve Generic Method Definition for Convert during initialization.");
                var __genericArgs = new global::System.Type[]
                {
                    typeof(string),
                    typeof(int),
                };
                return __genericMethodDefinition.MakeGenericMethod(__genericArgs);
            }
            
        }
    }
}
