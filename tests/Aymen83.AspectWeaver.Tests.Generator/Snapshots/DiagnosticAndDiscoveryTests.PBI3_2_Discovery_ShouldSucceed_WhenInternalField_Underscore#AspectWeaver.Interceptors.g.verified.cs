//HintName: AspectWeaver.Interceptors.g.cs
// <auto-generated>
// This file was generated by Aymen83.AspectWeaver. DO NOT EDIT.
// </auto-generated>

#nullable enable

#pragma warning disable CS1591
#pragma warning disable RS0016

using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Reflection;

namespace Aymen83.AspectWeaver.Generated
{
    [global::System.Diagnostics.DebuggerStepThrough]
    [global::System.Diagnostics.DebuggerNonUserCode]
    internal static class Interceptors
    {
        [global::System.Runtime.CompilerServices.InterceptsLocation(version: 1, data: "[ScrubbedData]")]
        [global::System.Runtime.CompilerServices.MethodImpl(global::System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining)]
        internal static void InterceptMethod0(this global::TestApp.MyService __instance)
        {
            // 1. Resolve IServiceProvider
            global::System.IServiceProvider __serviceProvider = __instance._serviceProvider;
            if (__serviceProvider == null) throw new global::System.InvalidOperationException("The IServiceProvider accessed via '__instance._serviceProvider' returned null. Ensure the provider is correctly initialized on the instance.");
            
            // 2. Create InvocationContext
            var __arguments = new global::System.Collections.Generic.Dictionary<string, object?>()
            {
            };
            var __context = new global::Aymen83.AspectWeaver.Abstractions.InvocationContext(
                targetInstance: __instance,
                serviceProvider: __serviceProvider,
                methodInfo: Interceptor0_Cache.MethodInfo,
                methodName: "DoWork",
                targetTypeName: "global::TestApp.MyService",
                arguments: __arguments
            );
            
            // 3. Core: The original method call.
            global::System.Func<global::Aymen83.AspectWeaver.Abstractions.InvocationContext, global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>> __pipeline = (ctx) =>
            {
                __instance.DoWork();
                return new global::System.Threading.Tasks.ValueTask<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(global::Aymen83.AspectWeaver.Abstractions.VoidResult.Instance);
            };
            
            // 4. Wrapping: Apply aspects (from inner to outer).
            // Aspect 0: global::DIAttribute (Order=0)
            var __next0 = __pipeline;
            var __handler0 = (global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::DIAttribute>?)__serviceProvider.GetService(typeof(global::Aymen83.AspectWeaver.Abstractions.IAspectHandler<global::DIAttribute>));
            if (__handler0 == null) throw new global::System.InvalidOperationException("Handler not registered for aspect: global::DIAttribute");
            var __attribute0 = Interceptor0_Cache.Attribute_0;
            __pipeline = (ctx) =>
            {
                return __handler0.InterceptAsync<global::Aymen83.AspectWeaver.Abstractions.VoidResult>(__attribute0, ctx, __next0);
            };
            
            // 5. Execute the pipeline.
            // Execution Mode: Synchronous.
            var __finalResult = __pipeline(__context).GetAwaiter().GetResult();
        }
        
        [global::System.Diagnostics.DebuggerStepThrough]
        [global::System.Diagnostics.DebuggerNonUserCode]
        private static class Interceptor0_Cache
        {
            internal static readonly MethodInfo MethodInfo = InitMethodInfo();
            
            internal static readonly global::DIAttribute Attribute_0 = InitAttribute_0();
            
            private static global::DIAttribute InitAttribute_0()
            {
                return new global::DIAttribute();
            }
            
            private static MethodInfo InitMethodInfo()
            {
                var __targetType = typeof(global::TestApp.MyService);
                var __paramTypes = new global::System.Type[]
                {
                };
                var methodInfo = __targetType.GetMethod("DoWork", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance, null, __paramTypes, null);
                if (methodInfo == null) throw new global::System.InvalidOperationException("Could not resolve MethodInfo for DoWork during initialization.");
                return methodInfo;
            }
            
        }
    }
}
